import os, asyncio, yfinance as yf, pandas as pd, numpy as np
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render

# –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ETF (–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ –Ω–∞ S&P500)
TICKERS = ["SPY","VOO","IVV","QQQ","DIA"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∞–∫—Ü–∏–π/ETF. –ö–æ–º–∞–Ω–¥—ã:\n"
        "/strong ‚Äî —Å–∏–ª—å–Ω—ã–µ –∏–¥–µ–∏ –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É —Å–∫–æ—Ä—É (30–¥ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å / –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)."
    )

async def strong(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = []
    for t in TICKERS:
        try:
            df = yf.download(t, period="6mo", interval="1d", auto_adjust=True, progress=False, threads=False)
            if df is None or df.empty or len(df) < 30:
                continue
            ret30 = df["Close"].pct_change(30).iloc[-1]
            vol   = df["Close"].pct_change().std()
            score = (ret30 / vol) if vol and vol != 0 else 0.0
            rows.append((t, float(ret30), float(vol), float(score)))
        except Exception:
            continue
    if not rows:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return
    rows.sort(key=lambda x: x[3], reverse=True)
    txt = "üìä –°–∏–ª—å–Ω—ã–µ –∏–¥–µ–∏ (–Ω–∞–∏–≤–Ω—ã–π —Å–∫–æ—Ä):\n" + "\n".join([f"{i+1}. {t}: 30d={r:.2%}, score={s:.2f}" for i,(t,r,v,s) in enumerate(rows)])
    await update.message.reply_text(txt)

def make_app() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is empty. Set it in Render ‚Üí Environment Variables.")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("strong", strong))
    return app

if __name__ == "__main__":
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–±—Ö—É–∫–∞
    PORT = int(os.getenv("PORT", "10000"))  # Render –ø–µ—Ä–µ–¥–∞—Å—Ç —Å–≤–æ–π –ø–æ—Ä—Ç
    SECRET = os.getenv("WEBHOOK_SECRET", "secret-path-123")  # –ª—é–±–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –ø—É—Ç—å
    BASE = os.getenv("WEBHOOK_BASE") or os.getenv("RENDER_EXTERNAL_URL")  # Render –∑–∞–¥–∞—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–ª–æ—è
    app = make_app()
    if BASE:
        url = f"{BASE.rstrip('/')}/{SECRET}"
        print(f"Setting webhook to: {url}")
        app.run_webhook(listen="0.0.0.0", port=PORT, url_path=SECRET, webhook_url=url)
    else:
        # –µ—Å–ª–∏ BASE –µ—â—ë –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω (–ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π) ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω–∏–º–µ–º —Å–µ—Ä–≤–µ—Ä,
        # –Ω–æ –≤–µ–±—Ö—É–∫ —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è BASE
        print("WEBHOOK_BASE/RENDER_EXTERNAL_URL not set yet. Start HTTP server and set webhook on next deploy.")
        app.run_webhook(listen="0.0.0.0", port=PORT, url_path=SECRET)
