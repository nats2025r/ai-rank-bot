app.py
import os
import yfinance as yf
import pandas as pd
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
from sklearn.preprocessing import MinMaxScaler
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ S&P 500 ETF + —Å–∞–º–∏ –∏–Ω–¥–µ–∫—Å—ã
TICKERS = ["SPY", "VOO", "IVV", "QQQ", "DIA"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç AI-—Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ü–∏–π. –ù–∞–ø–∏—à–∏ /strong —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ –∏–¥–µ–∏.")

async def strong(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = []
    for ticker in TICKERS:
        data = yf.download(ticker, period="6mo", interval="1d")
        if len(data) < 30:
            continue

        # Momentum ‚Äî % —Ä–æ—Å—Ç–∞ –∑–∞ 30 –¥–Ω–µ–π
        data["Return_30d"] = data["Adj Close"].pct_change(30)
        last_return = data["Return_30d"].iloc[-1]

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—á–µ–º –Ω–∏–∂–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ)
        volatility = data["Adj Close"].pct_change().std()

        # AI-—Å–∫–æ—Ä (–ø—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
        score = (last_return / volatility) if volatility != 0 else 0
        results.append((ticker, last_return, volatility, score))

    df = pd.DataFrame(results, columns=["Ticker", "30d Return", "Volatility", "Score"])
    df = df.sort_values("Score", ascending=False)

    message = "üìä –°–∏–ª—å–Ω—ã–µ –∏–¥–µ–∏ (–ø–æ AI-—Å–∫–æ—Ä):\n"
    for _, row in df.iterrows():
        message += f"{row['Ticker']}: {row['30d Return']:.2%}, Score={row['Score']:.2f}\n"

    await update.message.reply_text(message)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("strong", strong))
    app.run_polling()

if __name__ == "__main__":
    main()
